步兵仿真目前仅可用于自瞄，由于gazebo插件bug导致的漂移问题（转弯速度过快或下坡上坡会导致步兵倾斜）尚未解决，所以还不能测试飞坡。

通信结构：
gazebo_teleop.cpp	gazebo中步兵模型运动控制文件
getpoint.cpp		获取gazebo中步兵实际位置传输给rviz用于更新rviz坐标轴
move.py		控制gazebo中的能量机关和小陀螺按指定规律运动
rviz.py			rviz通信文件，炮弹和tf关系更新




一：使用方式：
1.拷贝整个目录到你本地。
2.cd neuq_gazebo_rm
3.catkin_make
使用gazebo仿真：
4.roslaunch rm_description test.launch（在gazebo中加载场地模型和步兵模型）
5.roslaunch rm_description gazebo_node.launch(加载gazebo文件，在此终端可键盘操控)
使用rviz仿真：(关掉了gazebo仿真图像界面，接受gazebo步兵位置发送给rviz用于更新坐标，gazebo运行太卡可以用这个，rviz中能量机关和陀螺是静止的只是用于参考相对位置,建议imshow显示gazebo摄像头画面，这样更加准确)
4.roslaunch rm_description rviz.launch（gazebo加载步兵文件）
5.roslaunch single_2101t display.launch（rviz加载单项赛场地）
6.roslaunch rm_description rviz_node.launch（加载rviz文件，在此终端可键盘操控）


二、接口问题：
1.通过订阅gazebo中仿真相机的画面用于测试识别，订阅话题名为/swivel/rrbot/camera1/image_raw。（消息类型为图像）
2.通过向gazebo发送计算出的云台角度更新gazebo画面用于测试自瞄，发送话题名为"/swivel/swivel/swiveljoint2_position_controller/command"（pitch）和
"/swivel/swivel/swiveljoint1_position_controller/command"（yaw）。（消息类型为std_msgs中的Float64）
3.要实时修改rviz坐标轴转角的话需要将计算出的pitch和yaw，通过control的消息名发送给rviz.py，自定义消息类型已给出,在rm_description里面的msg。


三、键盘操控：
键盘节点在gazebo和rviz的launch中都有，在终端中输入字符就能控制。
wsad分别对应底盘前后左右，大写WSAD是增加对应方向的速度。
ikjl是云台的上下左右。


黄色小块是相机。红色小块不用在意。
为了方便测试自瞄我们把相机放在了炮筒口，想要修改相机位置在步兵的urdf文件里修改即可。




